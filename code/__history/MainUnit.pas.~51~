unit MainUnit;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls,
  Vcl.Imaging.jpeg, CartesianTree, System.UITypes;

type
  TShipment = record
    SourceID: Integer;       // ID склада
    DestinationID: Integer;  // ID магазина
    ProductID: integer;
    Quantity: Integer;
    DepartureTime: TDateTime;

  end;
  PShipment = ^TShipment;


  TfrMainForm = class(TForm)
    pnNav: TPanel;
    btnNavMap: TButton;
    btnNavBalance: TButton;
    btnNavOrders: TButton;
    bntNavDelivery: TButton;
    btnNavAnalytics: TButton;
    pnMapWrap: TPanel;
    imgMap: TImage;
    pnCreateSelect: TPanel;
    btnCreateSelectShop: TButton;
    btnCreateSelectWarehouse: TButton;
    btnCreateSelectCancel: TButton;
    spMapPoint: TShape;
    pnCreateObj: TPanel;
    lbCreateObjName: TLabel;
    edCreateObjName: TEdit;
    lbCreateObjStreet: TLabel;
    edCreateObjStreet: TEdit;
    lbCreateObjHouse: TLabel;
    edCreateObjHouse: TEdit;
    btnCreateObjConfirm: TButton;
    btnCreateObjCancel: TButton;
    lbCreateObjBuilding: TLabel;
    edCreateObjBuilding: TEdit;
    edCreateObjCapacity: TEdit;
    lbCreateObjCapacity: TLabel;
    pnSelectObject: TPanel;
    btnSelectObjEdit: TButton;
    btnSelectObjDelete: TButton;
    btnSelectObjCancel: TButton;
    pnEditObj: TPanel;
    lbEditObjName: TLabel;
    lbEditObjStreet: TLabel;
    lbEditObjHouse: TLabel;
    lbEditObjBuilding: TLabel;
    lbEditObjCapacity: TLabel;
    edEditObjName: TEdit;
    edEditObjStreet: TEdit;
    edEditObjHouse: TEdit;
    btnEditObjConfirm: TButton;
    btnEditObjCancel: TButton;
    edEditObjBuilding: TEdit;
    edEditObjCapacity: TEdit;


    procedure createNewObj(var newObj: PLocation; const isShop: boolean);

    procedure imgMapMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure btnCreateSelectCancelClick(Sender: TObject);
    procedure btnCreateObjCancelClick(Sender: TObject);
    procedure btnCreateSelectClick(Sender: TObject);
    procedure btnCreateObjConfirmClick(Sender: TObject);


    function validateLength(Sender: TObject): boolean;
    function validateLetters(Sender: TObject): boolean;
    function validateAll(Sender: TObject): boolean;

    procedure OnClickValidateLength(Sender: TObject);
    procedure OnClickValidateLetters(Sender: TObject);
    procedure OnClickvalidateAll(Sender: TObject);

    function getShopKey: integer;
    function getWarehouseKey: integer;

    procedure createShop(Sender: TObject);
    procedure createWarehouse(Sender: TObject);

    function validateCreateObj: boolean;
    procedure FormCreate(Sender: TObject);

    procedure pnSelectObjectShow(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);

    procedure hideAllPanels;

    procedure showPanel(const panel: TPanel; const x, y: integer);

    procedure btnSelectObjDeleteClick(Sender: TObject);
    procedure btnSelectObjCancelClick(Sender: TObject);
    procedure btnSelectObjEditClick(Sender: TObject);
    procedure btnEditObjConfirmClick(Sender: TObject);

    function getConfirmation: boolean;

  private
    { Private declarations }
    xPos, yPos: integer;
    shops, warehouses: PTreapNode;
    shopKey, warehouseKey: integer;

    const
      shopColor = clHighlight;
      warehouseColor = clMaroon;
      mask = 1 shl 30;
  public
    { Public declarations }

  end;

var
  frMainForm: TfrMainForm;

implementation

{$R *.dfm}

function TfrMainForm.getConfirmation: boolean;
var
  Dlg: TForm;
  i: integer;
begin
    Dlg := CreateMessageDialog('Вы подтверждаете действие?',
                             mtConfirmation, [mbYes, mbNo]);
  try
    Dlg.Caption := 'Подтверждение действия';
    for i := 0 to Dlg.ComponentCount - 1 do
    begin
      if Dlg.Components[i] is TButton then
      begin
        with TButton(Dlg.Components[i]) do
        begin
          if ModalResult = mrYes then
            Caption := 'Да'
          else if ModalResult = mrNo then
            Caption := 'Нет';
        end;
      end;
    end;
    Result := Dlg.ShowModal = mrYes;
  finally
    Dlg.Free;
  end;
end;

procedure TfrMainForm.showPanel(const panel: TPanel; const x, y: integer);
begin
  //check y pos
  panel.top := y;
  if Y >= panel.height then
    panel.top := panel.top - panel.height;

  //check x pos
  panel.left := x;
  if X + panel.width > imgMap.width then
    panel.left := panel.left - panel.width;

  panel.visible := true;
end;

procedure TfrMainForm.hideAllPanels;
begin
  pnCreateObj.Visible := false;
  pnCreateSelect.Visible := false;
  pnSelectObject.Visible := false;
  pnEditObj.Visible := false;
end;

function TfrMainForm.getShopKey: integer;
begin
  Result := shopKey;
  shopKey := shopKey + 1;
end;

function TfrMainForm.getWarehouseKey: integer;
begin
  Result := warehouseKey;
  warehouseKey := warehouseKey + 1;
end;

procedure TfrMainForm.btnSelectObjCancelClick(Sender: TObject);
begin
  pnSelectObject.Visible := false;
end;

procedure TfrMainForm.btnSelectObjEditClick(Sender: TObject);
var
  curNode: PTreapNode;
begin
  hideAllPanels;


  pnEditObj.tag := pnSelectObject.tag;

  if (pnSelectObject.tag and mask) <> 0 then
  begin
    //shop
    curNode := FindTreap(shops, pnSelectObject.tag xor mask);
  end
  else
  begin
    //warehouse
    curNode := FindTreap(warehouses, pnSelectObject.tag);
  end;

  showPanel(pnEditObj,
            curNode^.Data^.X + (curNode^.Data^.shape.Width shr 1),
            curNode^.Data^.Y + (curNode^.Data^.shape.Height shr 1)
            );

  edEditObjName.Text := string(curNode^.Data^.name);
  edEditObjStreet.Text := string(curNode^.Data^.street);
  edEditObjHouse.Text := intToStr(curNode^.Data^.house);
  if curNode^.Data^.building <> -1 then
    edEditObjBuilding.Text := intToStr(curNode^.Data^.building);
  edEditObjCapacity.Text := intToStr(curNode^.Data^.capacity);
end;

procedure TfrMainForm.btnSelectObjDeleteClick(Sender: TObject);
var
  curNode: PTreapNode;
begin
  if getConfirmation then
  begin
    hideAllPanels;
    if (pnSelectObject.tag and mask) <> 0 then
    begin
      //shop
      curNode := FindTreap(shops, pnSelectObject.tag xor mask);
      FreeAndNil(curNode^.Data^.shape);
      EraseTreap(shops, pnSelectObject.tag xor mask);
    end
    else
    begin
      //warehouse
      curNode := FindTreap(warehouses, pnSelectObject.tag);
      FreeAndNil(curNode^.Data^.shape);
      EraseTreap(warehouses, pnSelectObject.tag);
    end;
  end;
end;

procedure TfrMainForm.pnSelectObjectShow(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
begin
  X := (Sender as TShape).left + ((Sender as TShape).width shr 1);
  Y := (Sender as TShape).top + ((Sender as TShape).height shr 1);
  showPanel(pnSelectObject, X, Y);

  pnSelectObject.tag := (Sender as TShape).tag;
end;


procedure TfrMainForm.createNewObj(var newObj: PLocation; const isShop: boolean);
begin
  New(newObj);
  newObj^.name := shortString(edCreateObjName.Text);
  newObj^.street := shortString(edCreateObjStreet.Text);
  newObj^.house := strToInt(edCreateObjHouse.Text);
  newObj^.building := -1;
  if Length(edCreateObjBuilding.Text) > 0 then
    newObj^.building := strToInt(edCreateObjBuilding.Text);
  newObj^.capacity := strToInt(edCreateObjCapacity.Text);

  newObj^.X := xPos;
  newObj^.Y := yPos;

  newObj^.shape := TShape.Create(self);
  newObj^.shape.Parent := spMapPoint.Parent;

  newObj^.shape.Width := spMapPoint.Width;
  newObj^.shape.Height := spMapPoint.Height;

  newObj^.shape.Left := xPos - newObj^.shape.width shr 1;
  newObj^.shape.Top := yPos - newObj^.shape.height shr 1;


  newObj^.shape.Shape := stCircle;

  newObj^.shape.Cursor := crHandPoint;

  if isShop then
  begin
    newObj^.key := getShopKey;
    newObj^.shape.Brush.Color := shopColor;
  end
  else
  begin
    newObj^.key := getWarehouseKey;
    newObj^.shape.Brush.Color := warehouseColor;
  end;

  newObj^.shape.Tag := newObj^.key;

  newObj^.shape.onMouseUp := pnSelectObjectShow;

  newObj^.shape.Visible := true;
  newObj^.shape.BringToFront;
end;

procedure TfrMainForm.FormCreate(Sender: TObject);
begin
  Randomize;
  shopKey := 1;
  warehouseKey := 1;
  InitTree(shops);
  InitTree(wareHouses);
end;


procedure TfrMainForm.createShop(Sender: TObject);
var
  newObj: PLocation;
begin
  createNewObj(newObj, true);
  InsertTreap(shops, newObj);
end;

procedure TfrMainForm.createWarehouse(Sender: TObject);
var
  newObj: PLocation;
begin
  createNewObj(newObj, false);
  InsertTreap(warehouses, newObj);
end;



function TfrMainForm.validateAll(Sender: TObject): boolean;
begin
  Result := validateLength(Sender);
  Result := validateLetters(Sender) and Result;
end;

function TfrMainForm.validateLetters(Sender: TObject): boolean;
var
  i:integer;
begin
  Result := true;
  for i := Low((Sender as TEdit).Text) to High((Sender as TEdit).Text) do
  begin
    if (((Sender as TEdit).Text[i] <> ' ')
       and
         (
         (
          (lowerCase((Sender as TEdit).Text[i]) > 'z')
          or (lowerCase((Sender as TEdit).Text[i]) < 'a')
         )
         and
         (
          (lowerCase((Sender as TEdit).Text[i]) > 'я')
          or (lowerCase((Sender as TEdit).Text[i]) < 'а'))
         )
       ) then
    begin
      (Sender as TEdit).color := clRed;
      Result := false;
    end;
  end;
end;

function TfrMainForm.validateLength(Sender: TObject): boolean;
begin
  Result := true;
  (Sender as TEdit).Text := trimLeft((Sender as TEdit).Text);
  (Sender as TEdit).SelStart := Length((Sender as TEdit).Text);
  if Length((Sender as TEdit).Text) = 0 then
  begin
    (Sender as TEdit).color := clRed;
    Result := false;
  end;
end;

procedure TfrMainForm.OnClickValidateLetters(Sender: TObject);
begin
  if validateLetters(Sender) then
  begin
    (Sender as TEdit).color := clWindow;
  end;
end;

procedure TfrMainForm.OnClickValidateLength(Sender: TObject);
begin

  if validateLength(Sender) then
  begin
    (Sender as TEdit).color := clWindow;
  end;

end;

procedure TfrMainForm.OnClickvalidateAll(Sender: TObject);
begin
  if (validateLength(Sender)) and (validateLetters(Sender)) then
  begin
    (Sender as TEdit).color := clWindow;
  end;
end;

function TfrMainForm.validateCreateObj: boolean;
begin
  Result := validateLength(edCreateObjName);

  Result := validateLength(edCreateObjStreet) and Result;

  Result := validateLetters(edCreateObjStreet) and Result;

  Result := validateLength(edCreateObjHouse) and Result;

  Result := validateLength(edCreateObjCapacity) and Result;
end;

procedure TfrMainForm.btnCreateSelectClick(Sender: TObject);
begin
  hideAllPanels;

  edCreateObjName.color := clWindow;
  edCreateObjStreet.color := clWindow;
  edCreateObjHouse.color := clWindow;
  edCreateObjCapacity.color := clWindow;

  //check y pos
  pnCreateObj.top := yPos;
  if yPos >= pnCreateObj.height then
    pnCreateObj.top := pnCreateObj.top - pnCreateObj.height;

  //check x pos
  pnCreateObj.left := xPos;
  if xPos + pnCreateObj.width > imgMap.width then
    pnCreateObj.left := pnCreateObj.left - pnCreateObj.width;

  pnCreateObj.tag := (Sender as TButton).tag;  //tag=1 - shop, tag=2 - Warehouse
  pnCreateObj.visible := true;
end;


procedure TfrMainForm.btnEditObjConfirmClick(Sender: TObject);
begin
  if getConfirmation then
  begin

  end;
  hideAllPanels;
end;

procedure TfrMainForm.btnCreateObjConfirmClick(Sender: TObject);
begin
  if validateCreateObj then
  begin
    edCreateObjName.Text := trim(edCreateObjName.Text);
    edCreateObjStreet.Text := trim(edCreateObjStreet.Text);

    if pnCreateObj.tag = 1 then
    begin
      //create shop
      createShop(Sender);
    end
    else if pnCreateObj.tag = 2 then
    begin
      //create warehouse
      createWarehouse(Sender);
    end
    else
    begin
      //error
    end;
    edCreateObjName.Text := '';
    edCreateObjStreet.Text := '';
    edCreateObjHouse.Text := '';
    edCreateObjBuilding.Text := '';
    edCreateObjCapacity.Text := '';
    hideAllPanels;
    spMapPoint.visible := false;
  end
  else
  begin

  end;
end;

procedure TfrMainForm.btnCreateSelectCancelClick(Sender: TObject);
begin
  hideAllPanels;
  spMapPoint.visible := false;
end;


procedure TfrMainForm.btnCreateObjCancelClick(Sender: TObject);
begin
  edCreateObjName.Text := '';
  edCreateObjStreet.Text := '';
  edCreateObjHouse.Text := '';
  edCreateObjBuilding.Text := '';
  edCreateObjCapacity.Text := '';
  hideAllPanels;
  spMapPoint.visible := false;
end;


procedure TfrMainForm.imgMapMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  hideAllPanels;

  xPos := X;
  yPos := Y;
  showPanel(pnCreateSelect, xPos, yPos);

  //print green point
  spMapPoint.top := Y - spMapPoint.height shr 1;
  spMapPoint.left := X - spMapPoint.width shr 1;
  spMapPoint.visible := true;
end;

end.
